package chatbotDAO;

import dao.DBConnection;
import jakarta.persistence.EntityManager;
import jakarta.persistence.Query;
import model.*;
import java.util.List;

public class ChatbotDAO {
    private EntityManager em;
    public ChatbotDAO() {
        em = DBConnection.getEntityManager();
    }

    public String getPrice(String productName) {
        try {
            Query query = em.createNamedQuery("Products.getPrice");
            query.setParameter("name", "%" + productName + "%");
            Products product = (Products) query.setMaxResults(1).getSingleResult();

            // Convert BigDecimal price to double, handle null case
            double price = product.getPrice() != null ? product.getPrice().doubleValue() : 0.0;
            // Convert Integer discount to double, handle null case
            double discount = product.getDiscount() != null ? product.getDiscount() : 0;
            // Calculate final price as double
            double finalPrice = price * (1 - discount / 100.0);

            return "üõçÔ∏è S·∫£n ph·∫©m '" + product.getProductName() + "' c√≥ gi√° " + finalPrice + " VNƒê (ƒë√£ gi·∫£m gi√°).";
        } catch (Exception e) {
            return "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m '" + productName + "'.";
        }
    }

    public String getSizes(String productName) {
        try {
            Query query = em.createNamedQuery("Productsizecolor.getSize", String.class);
            query.setParameter("name", "%" + productName + "%");
            List<String> sizes = query.getResultList();
            if (!sizes.isEmpty()) {
                return "üìè S·∫£n ph·∫©m c√≥ c√°c k√≠ch c·ª°: " + String.join(", ", sizes) + ".";
            }
            return "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y k√≠ch c·ª° cho '" + productName + "'.";
        } catch (Exception e) {
            return "‚ö†Ô∏è L·ªói khi t√¨m k√≠ch c·ª° cho '" + productName + "': " + e.getMessage();
        }
    }

    public String getColors(String productName) {
        try {
            Query query = em.createNamedQuery("Productsizecolor.getColors", String.class);
            query.setParameter("name", "%" + productName + "%");
            List<String> colors = query.getResultList();
            if (!colors.isEmpty()) {
                return "üé® S·∫£n ph·∫©m c√≥ c√°c m√†u: " + String.join(", ", colors) + ".";
            }
            return "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y m√†u cho '" + productName + "'.";
        } catch (Exception e) {
            return "‚ö†Ô∏è L·ªói khi t√¨m m√†u cho '" + productName + "': " + e.getMessage();
        }
    }

    public String checkAvailabilityWithSizeAndColor(String productName, String size, String color) {
        try {
            String jpql = "SELECT psc FROM Productsizecolor psc JOIN psc.productID p WHERE p.productName LIKE :name AND p.status = TRUE";
            if (size != null) jpql += " AND UPPER(TRIM(psc.size.sizeName)) = UPPER(:size)";
            if (color != null) jpql += " AND UPPER(TRIM(psc.color.colorName)) = UPPER(:color)";
            
            Query query = em.createQuery(jpql);
            query.setParameter("name", "%" + productName + "%");
            if (size != null) query.setParameter("size", size.trim());
            if (color != null) query.setParameter("color", color.trim());
            
            Productsizecolor psc = (Productsizecolor) query.setMaxResults(1).getSingleResult();
            Products product = psc.getProductID();
            double adjustedPrice = product.getPrice().doubleValue();
            if (size != null) {
                if (size.equalsIgnoreCase("XL")) adjustedPrice += 50000;
                else if (size.equalsIgnoreCase("XXL")) adjustedPrice += 80000;
            }
            StringBuilder response = new StringBuilder("‚úÖ S·∫£n ph·∫©m '" + product.getProductName() + "' ");
            if (size != null) response.append("size ").append(psc.getSizeID().getSizeName()).append(" ");
            if (color != null) response.append("m√†u ").append(psc.getColorID().getColorName()).append(" ");
            response.append("c√≥ s·∫µn v·ªõi gi√° ").append(adjustedPrice).append(" VNƒê!");
            return response.toString();
        } catch (Exception e) {
            StringBuilder response = new StringBuilder("‚ùå S·∫£n ph·∫©m '" + productName + "' ");
            if (size != null) response.append("size ").append(size).append(" ");
            if (color != null) response.append("m√†u ").append(color).append(" ");
            response.append("hi·ªán kh√¥ng c√≥ s·∫µn ho·∫∑c kh√¥ng t·ªìn t·∫°i.");
            return response.toString();
        }
    }

    public String getDiscount(String productName) {
        try {
            Query query = em.createQuery(
                "SELECT p FROM Products p WHERE p.productName LIKE :name AND p.status = TRUE",
                Products.class
            );
            query.setParameter("name", "%" + productName + "%");
            Products product = (Products) query.setMaxResults(1).getSingleResult();
            Integer discount = product.getDiscount();
            if (discount != null && discount > 0) {
                return "üí∞ S·∫£n ph·∫©m '" + product.getProductName() + "' c√≥ gi·∫£m gi√° " + discount + "%.";
            } else {
                return "‚ö†Ô∏è S·∫£n ph·∫©m '" + product.getProductName() + "' kh√¥ng c√≥ gi·∫£m gi√°.";
            }
        } catch (Exception e) {
            return "‚ö†Ô∏è L·ªói khi t√¨m gi·∫£m gi√° cho '" + productName + "': " + e.getMessage();
        }
    }

    public String getRating(String productName) {
        try {
            Query query = em.createQuery(
                "SELECT AVG(r.rating) FROM Reviews r JOIN r.productID p " +
                "WHERE p.productName LIKE :name AND p.status = TRUE",
                Double.class
            );
            query.setParameter("name", "%" + productName + "%");
            Double avgRating = (Double) query.getSingleResult();
            if (avgRating != null) {
                return "‚≠ê S·∫£n ph·∫©m '" + productName + "' c√≥ ƒë√°nh gi√° trung b√¨nh: " + avgRating + "‚≠ê.";
            }
            return "‚ö†Ô∏è S·∫£n ph·∫©m '" + productName + "' ch∆∞a c√≥ ƒë√°nh gi√°.";
        } catch (Exception e) {
            return "‚ö†Ô∏è L·ªói khi t√¨m ƒë√°nh gi√° cho '" + productName + "': " + e.getMessage();
        } finally {
            em.close();
        }
}

    public String getAllProducts() {
        try {
            Query query = em.createQuery("SELECT p.productName FROM Products p WHERE p.status = TRUE ORDER BY p.productName");
            List<String> products = query.getResultList();
            if (!products.isEmpty()) {
                return "üõí T·∫•t c·∫£ s·∫£n ph·∫©m m√† shop b√°n: " + String.join(", ", products) + ".";
            }
            return "‚ö†Ô∏è Hi·ªán t·∫°i shop kh√¥ng c√≥ s·∫£n ph·∫©m n√†o.";
        } finally {
            em.close();
        }
    }

    public String getProductsByCategory(String categoryName) {
        try {
            Query query = em.createQuery(
                "SELECT p.productName FROM Products p " +
                "JOIN p.productCategoriesCollection pc " +
                "JOIN pc.categoryID c " +
                "WHERE c.categoryName LIKE :name AND p.status = TRUE",
                String.class
            );
            query.setParameter("name", "%" + categoryName + "%");
            List<String> products = query.getResultList();
            if (!products.isEmpty()) {
                return "üõí S·∫£n ph·∫©m trong danh m·ª•c '" + categoryName + "': " + String.join(", ", products) + ".";
            }
            return "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o trong danh m·ª•c '" + categoryName + "'.";
        } catch (Exception e) {
            return "‚ö†Ô∏è L·ªói khi t√¨m s·∫£n ph·∫©m trong danh m·ª•c '" + categoryName + "': " + e.getMessage();
        } finally {
            em.close();
        }
    }
}